{"version":3,"sources":["graphql/pokemons.js","components/Loading/Loading.js","components/PokemonCrossword/PokemonCrossword.js","App.js","serviceWorker.js","index.js","logo.png","winner.png"],"names":["GET_POKEMONS","gql","Loading","className","pokemonTypeString","types","length","typeString","join","lastCommaIndex","lastIndexOf","substr","generateClueBasedOnDifficulty","pokemon","difficulty","classification","PokemonCrossword","React","useEffect","useQuery","variables","first","data","pokemons","crosswordData","inputPokemonsData","sortedAndTrimmedPokemonData","sort","a","b","Math","random","slice","validPokemonFromSortedList","filter","test","name","inputData","map","answer","clue","generateCrossword","across","down","acrossData","reduce","acc","word","idx","Object","assign","downData","generateData","useStorage","theme","columnBreakpoint","gridBackground","cellBackground","cellBorder","textColor","numberColor","focusBackground","highlightBackground","onCorrect","direction","number","rightPokemon","find","toUpperCase","toast","closeToast","src","image","width","onCrosswordCorrect","completed","WinnerImage","App","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","setDifficulty","client","ApolloClient","uri","autoClose","logo","alt","onClick","role","aria-label","href","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.c9c45f17.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const GET_POKEMONS = gql`\n    query pokemons($first: Int!) {\n        pokemons(first: $first) {\n            name\n            types\n            image\n            classification\n        }   \n    }\n`;\n","import React from 'react';\nimport './loading.css';\n\nconst Loading = () => (<div className=\"loader\">Loading...</div>);\n\nexport default Loading;\n","import React from 'react';\nimport { toast } from 'react-toastify';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_POKEMONS } from '../../graphql/pokemons';\nimport Crossword from '@jaredreisinger/react-crossword';\nimport { generateCrossword } from 'crossword-gen';\nimport './pokemon-crossword.css';\nimport Loading from '../Loading/Loading';\nimport WinnerImage from '../../winner.png';\n\nconst pokemonTypeString = (types = []) => {\n  if(types.length > 1) {\n    const typeString = types.join(', ');\n    const lastCommaIndex = typeString.lastIndexOf(',');\n    return `${typeString.substr(0, lastCommaIndex)} and ${typeString.substr(lastCommaIndex + 1)}`;\n  }\n  return types[0];\n}\n\nconst generateClueBasedOnDifficulty = (pokemon = {}, difficulty = 0) => {\n  const { classification, types } = pokemon;\n  switch(difficulty) {\n    case 0:\n      return `${pokemonTypeString(types)} type ${classification}`;\n    case 1:\n      return classification;\n    case 2:\n    default:\n      return `${pokemonTypeString(types)} type`;\n  }\n}\n\nconst generateData = (inputPokemonsData = [], difficulty) => {\n  const sortedAndTrimmedPokemonData = inputPokemonsData.sort((a, b) => (0.5 - Math.random())).slice(0, (7 + 3 * difficulty));\n  const validPokemonFromSortedList = sortedAndTrimmedPokemonData.filter(pokemon => /^[a-zA-Z]*$/.test(pokemon.name));\n  const inputData = validPokemonFromSortedList.map(pokemon => ({\n    answer: pokemon.name,\n    clue: generateClueBasedOnDifficulty(pokemon, difficulty),\n  }));\n  const { across = [], down = [] } = generateCrossword(inputData);\n  const acrossData = across.reduce((acc, word, idx) => (\n    Object.assign({}, acc, {\n      [idx + 1]: word,\n    })), {});\n  const downData = down.reduce((acc, word, idx) => (\n    Object.assign({}, acc, {\n      [idx + 1]: word,\n    })), {});\n  return {\n    across: acrossData,\n    down: downData,\n  }\n}\n\nconst PokemonCrossword = ({ difficulty }) => {\n  React.useEffect(() => {\n    \n  }, []);\n  const { data: { pokemons = [] } = {} } = useQuery(GET_POKEMONS, {\n      variables: { first: 151 },\n  });\n  if(!pokemons.length) {\n    return <Loading />;\n  }\n  const crosswordData = generateData(pokemons, difficulty);\n  return (\n    <div className=\"crossword-div\">\n      <Crossword\n        data={crosswordData}\n        useStorage={false}\n        theme={{\n          columnBreakpoint: '600px',\n          gridBackground: 'transparent',\n          cellBackground: '#ffe',\n          cellBorder: '#4d8be5',\n          textColor: '#212121',\n          numberColor: '#000',\n          focusBackground: '#4f97dd',\n          highlightBackground: '#89b2db',\n        }}\n        onCorrect={(direction, number, answer) => {\n          const rightPokemon = pokemons.find(pokemon => pokemon.name.toUpperCase() === answer);\n          toast(({ closeToast }) => (\n            <div className=\"toast-grid\">\n              <img src={rightPokemon.image} width=\"100\" />\n              <div className=\"toast-text\">You guessed it right!<br/>It's <strong>{rightPokemon.name}</strong></div>\n            </div>\n          ));\n        }}\n        onCrosswordCorrect={(completed) => {\n          if(completed) {\n            toast(({ closeToast }) => (\n              <div className=\"winning-notification\">\n                <img src={WinnerImage} width=\"200px\" />\n                <div className=\"toast-text\">Congrats! You solved it!</div>\n              </div>\n            ));\n          }\n        }}\n      />\n    </div>);\n}\n\nexport default PokemonCrossword;\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport logo from './logo.png';\n\nimport './App.css';\nimport PokemonCrossword from './components/PokemonCrossword/PokemonCrossword';\n\nconst useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nconst App = () => {\n  const [difficulty, setDifficulty] = useLocalStorage('difficulty', 0);\n  const client = new ApolloClient({\n    uri: 'https://graphql-pokemon2.vercel.app',\n  });\n  return (\n    <ApolloProvider client={client}>\n        <ToastContainer autoClose={10000}/>\n        <div className=\"App\">\n          <img src={logo} className=\"logo\" alt=\"Pokemon Crossword\" />\n          <div className=\"difficulty-selector\">\n            <button onClick={() => setDifficulty(0)} className={difficulty === 0 ? 'selected' : ''}>Easy</button>\n            <button onClick={() => setDifficulty(1)} className={difficulty === 1 ? 'selected' : ''}>Medium</button>\n            <button onClick={() => setDifficulty(2)} className={difficulty === 2 ? 'selected' : ''}>Hard</button>\n          </div>\n          <PokemonCrossword difficulty={difficulty}/>\n          <div className=\"footer\">Made with <span role=\"img\" aria-label=\"love\">❤️</span> by <a href=\"https://github.com/acesmndr\">acesmndr</a></div>\n        </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.04eceb88.png\";","module.exports = __webpack_public_path__ + \"static/media/winner.a8d32e3d.png\";"],"sourceRoot":""}